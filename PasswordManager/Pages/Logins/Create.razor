@page "/logins/create"

@inherits ProtectedPage

@inject ILogger<Create> Logger
@inject VaultLoginService VaultLoginService
@inject AuthStateContainer AuthStateContainer



<Header Text="New Login" />

<EditForm Model="@Model" OnSubmit="@Submit" class="flex flex-col gap-1">

    <label for="name">
        Name:<br>
        <InputText @bind-Value="Model!.Name" id="name" class="rounded-md focus:border-primary outline-none" />
    </label>

    <label for="description">
        Description:<br>
        <InputTextArea @bind-Value="Model!.Description" id="description" class="rounded-md focus:border-primary outline-none" />
    </label>

    <label for="url">
        URL:<br>
        <InputText @bind-Value="Model!.URL" id="url" class="rounded-md focus:border-primary outline-none" />
    </label>

    <label for="email">
        Email:<br>
        <InputText @bind-Value="Model!.Email" type="email" id="email" class="rounded-md focus:border-primary outline-none" />
    </label>

    <label for="username">
        Username:<br>
        <InputText @bind-Value="Model!.Username" id="username" class="rounded-md focus:border-primary outline-none" />
    </label>

    <label for="password">
        Password:<br>
        <InputText @bind-Value="Model!.Password" type="password" id="password" class="rounded-md focus:border-primary outline-none" />
    </label>
    <Button Text="Generate Password" OnClick="@GeneratePassword" />

    <label for="notes">
        Notes:<br>
        <InputTextArea @bind-Value="Model!.Notes" id="notes" class="rounded-md focus:border-primary outline-none" />
    </label>


    <label for="category">
        Category:<br>
        <InputText @bind-Value="Model!.Category" id="category" class="rounded-md focus:border-primary outline-none" />
    </label>
  
    <Button Text="Save" Type="submit" />
</EditForm>

@code {
    public VaultLoginModel Model { get; set; }

    protected override void OnInitialized()
    {
        InitialiseModel();
    }

    private void InitialiseModel()
    {
        Model = new()
        {
            Email = "",
            Name = "",
            Password = "",
            URL = "",
            Category = "",
            Description = "",
            Notes = "",
            Username = ""
        };
    }

    private async Task Submit()
    {
        try {
            Logger.LogInformation("Form Submitted");

            var dto = new CreateVaultLoginDto()
            {
                UserId = AuthStateContainer.LoggedInUser.Id,
                Name = Model.Name,
                Description = Model.Description,
                URL = Model.URL,
                Email = Model.Email,
                Username = Model.Username,
                Password = Model.Password,
                Category = Model.Category,
                Notes = Model.Notes
            };
            var vaultLogin = await VaultLoginService.Create(dto);

            Logger.LogInformation($"Created vault login: {vaultLogin.Id}");

            InitialiseModel();
        }
        catch (Exception e)
        {
            Logger.LogError($"Error creating login: {e.Message}");
        }
    }

    private void GeneratePassword(EventArgs e)
    {
        var dto = new GeneratePasswordDto();
        var password = VaultLoginService.GeneratePassword(dto);

        Model.Password = password;
    }
}
