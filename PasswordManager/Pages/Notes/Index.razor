@page "/notes"

@inherits ProtectedPage

@using API.Services;
@using Database.Models;
@using PasswordManager.Shared.Table

@inject AuthStateContainer AuthStateContainer
@inject VaultNoteService VaultNoteService
@inject ILogger<Index> Logger


@if (notes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <Header Text="Notes">
        <NavLink href="notes/create">
            <Button Text="New Note" />
        </NavLink>
    </Header>
     <div>
        <Table>
            <TableHead>
                <TableRow>
                    <TableHeader>Name</TableHeader>
                    <TableHeader>Last Updated</TableHeader>
                </TableRow>
            </TableHead>
            <TableBody>
                @foreach (var note in notes)
                {
                    <NavLink href="@($"notes/edit/{note.Id}")" class="flex grow">
                        <TableRow Color="bg-white">
                            <TableCell RoundDirection="l">@note.Name</TableCell>
                            <TableCell RoundDirection="r">@note.UpdatedDate</TableCell>
                        </TableRow>
                    </NavLink>
                }
            </TableBody>
        </Table>
    </div>
}

@code {
    private IEnumerable<VaultNoteSummaryDto> notes;

    protected override void OnInitialized()
    {
        base.OnInitialized();

        try 
        {
            var dto = new GetUserVaultNotesDto()
            {
                UserId = AuthStateContainer.LoggedInUser.Id
            };
            notes = VaultNoteService
                        .GetAll(dto)
                        .OrderByDescending(x => x.UpdatedDate);
        }
        catch (Exception e)
        {
            Logger.LogError($"Error getting notes: {e.Message}");
        }
    }
}
